import "copyright.stg"
import "primitiveEquals.stg"
import "primitiveHashCode.stg"
import "primitiveLiteral.stg"

isTest() ::= "true"

skipBoolean() ::= "true"

targetPath() ::= "com/gs/collections/impl/utility/internal/primitive"

fileName(primitive) ::= "<primitive.name>IteratorIterateTest"

class(primitive) ::= <<
<body(primitive.type, primitive.name, primitive.wrapperName)>
>>

body(type, name, wrapperName) ::= <<
<copyright()>

package com.gs.collections.impl.utility.internal.primitive;

import com.gs.collections.api.<name>Iterable;
import com.gs.collections.impl.block.factory.primitive.<name>Predicates;
import com.gs.collections.impl.list.mutable.FastList;
import com.gs.collections.impl.list.mutable.primitive.<name>ArrayList;
import com.gs.collections.impl.test.Verify;
import org.junit.Test;

/**
 * JUnit test for {@link <name>IteratorIterate}.
 * This file was automatically generated from template file primitiveIteratorIterateTest.stg.
 */
public class <name>IteratorIterateTest
{
    private final <name>Iterable iterable = <name>ArrayList.newListWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">);

    @Test
    public void select_target()
    {
        Verify.assertSize(2, <name>IteratorIterate.select(this.iterable.<type>Iterator(), <name>Predicates.greaterThan(<(literal.(type))("1")>), new <name>ArrayList(2)));
        Verify.assertSize(2, <name>IteratorIterate.select(this.iterable.<type>Iterator(), <name>Predicates.greaterThan(<(literal.(type))("1")>), new <name>ArrayList(3)));
        Verify.assertEmpty(<name>IteratorIterate.select(this.iterable.<type>Iterator(), <name>Predicates.lessThan(<(literal.(type))("0")>), new <name>ArrayList(3)));
    }

    @Test
    public void reject_target()
    {
        Verify.assertSize(1, <name>IteratorIterate.reject(this.iterable.<type>Iterator(), <name>Predicates.greaterThan(<(literal.(type))("1")>), new <name>ArrayList(1)));
        Verify.assertEmpty(<name>IteratorIterate.reject(this.iterable.<type>Iterator(), <name>Predicates.greaterThan(<(literal.(type))("0")>), new <name>ArrayList(0)));
    }

    @Test
    public void collect_target()
    {
        Verify.assertIterableSize(3, <name>IteratorIterate.collect(this.iterable.<type>Iterator(), String::valueOf, FastList.\<String>newList()));
    }
}

>>
